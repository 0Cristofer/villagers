// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Villagers.GameServer.Infrastructure.Data;

#nullable disable

namespace Villagers.GameServer.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Villagers.GameServer.Entities.CommandEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("jsonb");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<long>("TickNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TickNumber", "CreatedAt");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("Villagers.GameServer.Entities.RegistrationIntentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastRetryAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("StartingDirection")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PlayerId");

                    b.ToTable("RegistrationIntents");
                });

            modelBuilder.Entity("Villagers.GameServer.Entities.WorldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("TickNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WorldStates");
                });

            modelBuilder.Entity("Villagers.GameServer.Entities.RegistrationIntentEntity", b =>
                {
                    b.OwnsOne("Villagers.GameServer.Entities.RegistrationResultEntity", "LastResult", b1 =>
                        {
                            b1.Property<Guid>("RegistrationIntentEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ErrorMessage")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.Property<int>("FailureReason")
                                .HasColumnType("integer");

                            b1.Property<bool>("IsSuccess")
                                .HasColumnType("boolean");

                            b1.HasKey("RegistrationIntentEntityId");

                            b1.ToTable("RegistrationIntents");

                            b1.WithOwner()
                                .HasForeignKey("RegistrationIntentEntityId");
                        });

                    b.Navigation("LastResult");
                });

            modelBuilder.Entity("Villagers.GameServer.Entities.WorldEntity", b =>
                {
                    b.OwnsOne("Villagers.GameServer.Entities.WorldConfigEntity", "Config", b1 =>
                        {
                            b1.Property<Guid>("WorldEntityId")
                                .HasColumnType("uuid");

                            b1.Property<long>("TickIntervalMs")
                                .HasColumnType("bigint");

                            b1.Property<string>("WorldName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("WorldEntityId");

                            b1.ToTable("WorldStates");

                            b1.WithOwner()
                                .HasForeignKey("WorldEntityId");
                        });

                    b.Navigation("Config")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
